# -*- coding: utf-8 -*-
"""data_vis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10LiMV0lFDc6MTQ1UBGw3KiYz1XqyytF5

# ***DAY:1***(09/07/2024)

Selection Statements
"""

#Ques: To display the input time (in sec) into Hour:Minute:Second

time= int(input("enter time in seconds "))
if ((time>=0)):
    hour=0
    min=0
    #conversion of second in hour
    if(time>=3600):
      hour=time//3600
      time=time%3600
    #conversion of second in minute
    if(time>=60):
      min=time//60
      time=time%60
    print(hour,min,time)
else:
    print("time must be positive")

"""finding the greatest number Between two"""

num1=int(input("enter 1st number "))
num2=int(input("enter 2nd number "))

if num1 > num2:
    greatest = num1
else:
    if num2 > num1:
        greatest = num2
    else:
        greatest = "Both numbers are equal"

print("The greatest number is:", greatest)

"""# **DAY:2**(10/07/2024)




"""

#Ques: Given the Cost Price(CP) and Selling Price(SP) of a product. The task is to Calculate the Profit or Loss

cp=float(input("enter cost price (in Rs):  " ))
sp=float(input("enter selling price (in Rs): "))
if(cp<0 ):
    print("invalid cost price")
elif(sp<0):
    print("invalid selling price")
else:
    if(cp>sp):
      print("loss: Rs", (cp-sp))
    elif(cp<sp):
      print("profit: Rs", (sp-cp))
    else:
      print("no profit no loss")

"""# **DAY:3(11/07/2024)**

------------------------------------------------------------------------------
**Iteration**
-> To Repeat Statements or Group OF Statements Until The Condition is False.

**For Loop:** used when we know the number of iteration.

   **Components of For Loop:**
*   Initialization
*   Condition
*   Updation

**Syntax:**

```
for variable in sequence:
    #working

```
------------------------------------------------------------------------------

**While Loop:** used when we don't know about the number of iteration.

**Syntax:**


```
Intiialization
while(condition):
  #working
  update
```
------------------------------------------------------------------------------

**Range Function:** To Generate a Sequence of Numbers in Specified Range.

**Syntax:**


```
variable = range(start,end,step)
```

*   **Start:** lowest or Beginning value. include in sequence.(Default value for the start is 0)
* **End:** Highest or end value. Excluded in Sequence.
*  **Step:** Gap Between Two numbers.(Default value is =+1)

------------------------------------------------------------------------------


**end variable in print function:** it is used as a seprator. Default value is is next line.


```
print(x , end=" ")
```
























"""

#sum of given list

li=[80,90,30,20,70,80,39,87]
sum=0
for x in li:
  sum=sum+x
print(sum)

#The numbers between 10 to 500 dividible by both 10 and 7
for x in range(10,500):
    if(x%7==0 and x%10==0):
        print("The numbers between 10 to 500 dividible by both 10 and 7 are: ",x)

#count the numbers between 100 to 1000 which is even and divisible by 3

count=0
for x in range(100,1000):
  if(x%2==0 and x%3==0):
      print(x, end=",")
      count=count+1
print("\nThe number of numbers between 100 to 1000 which is even and divisible by 3 are: ",count)

"""# **DAY:4(12/07/2024)**

# **Collection Datatype:**
* It is the Collection of huge amount of data on a single name.


#**LIST:**

*   The list has lots of Operation among all the  sequence Datatypes.  
*  List is Mutable.
*  Collection of any type of data.
*   In List, Elements follow Insertion order.

*  Duplicate elements are allowed.

*  Elements are sorted in Square Brackets[].

**list creation:**

     `list=[1,2,3,"hello"]`

**Display list with format:**

     `print(list)`

**Display list without format:**

     `print(*list)`

**Display using for loop:**

```
for x in list:
  print(list)

```
-----These three operation does not working with indexing------

for loop does not reverse the element of a list

# **OPERATION:**


1.  Creation               
2.  Traversal              
3.  Insertion
4.  Deletion
5.  Sorting
6.  Searching
7.  Length(no. of elements)
8.  Concatenation
9.  Update
10. slicing
11. Indexing






"""

list=[1,2,3,4,"Hello"]
print("Display the list with formatting: ",list)
print("Display the list without formatting:")
print(*list)
print("---Display the list by access member using for loop(ELEMENT BY ELEMENT): ---")
for x in list:
  print(x)

"""# **INDEXING**


1.   Forward Indexing(default indexing)----->available in c,c++,java
2.   Backward Indexing----->Python


# **1. Forward Indexing**



*   Default indexing from leftmost element to rightmost element
*   Begin from 0
*   Ends at (length-1)

#**2. Backward Indexing**



*   Right to Left
*  Begins from -1 which is a index of rightmost element(last index)


#**Fetching element from List**
1. Single Element
     variable = listname[index]
2. Multiple Element (SLICING)
     sublist = listname[start_index : end_index : step]





"""

list=[1,2,3,4,5,"hello","World",6,7]
print("Fetching 3rd Element: ")
print(list[2])
print("fetching 4th element from last:")
print(list[-4])
print("Fetching elements from 3rd to 10th position:")
print(list[2:10])
print("Fetching alternate elements from 3rd to 10th position:")
print(list[2:10:2])

#create a list of 20 numbers and print the number in backward direction using forward indexing
list=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,15,18,19,20]
x=len(list)-1
for i in range(x,-1,-1):
  print(list[i],end=',')

"""#Insertion of element in List
1. Insertion at end
   * **append() :** to insert only one element at end of the list
        
          `syntax:  
              list_name.append(element)`

    example:
         list1=[1,2,3,4,5]
         list2=[6,7,8,9,10]
         print(list1.append(list2))
   * **extend() :** to insert all the element of any sequence datatype.

          `syntax:  
                 list_name.extend(list_2)`

    example:
              list1=[1,2,3,4,5]
              list2=[6,7,8,9,10]
              print(list1.extend(list2))
2. Insert element at specified position
     * **insert() :** to insert element at specified position.

           ` syntax: list_name.insert(index,element)`

    example:
        
        ```
         list1=[1,2,3,4,5]
         print(list1.insert(3,67))
        ```

Advantage:
if the element is already present at a particular index then system performs right shift opertion to shift the all elements from the right and vacant that position.

   
     




"""

#Ques: Find the method to insert all the element of another sequence datatype at particular index in the list. But all the element must be inserted one by one.
list1=[1,2,3,4,8,9,10]
list2=[5,6,7]
list1.insert(-3,5)
print(list1)

"""# **Removing element from List**
1.   **pop() :** It is done all the two Deletion operations  from end and a specified position in a list.
     
        syntax:
         listname.pop(index)
     example:
         list1=[1,2,3,4,5,6]
         print(list1.pop(3))    
2.  remove() : To delete the specified element in position of first occurence from left side.
    
     syntax:
         list_name.remove(element)
     example:
         list1=[1,2,3,4,5,6]
         print(list1.remove(3))
3.  clear() : To delete all the element from the list.
    
     syntax:
         list_name.clear(list)             






"""

#Ques: Find the method to insert all the element of another sequence datatype at particular index in the list. But all the element must be inserted one by one.
list1=[1,2,3,4,8,9,10]
list2=[5,6,7]
index=int(input("Enter the index where you want to insert the list2: "))
if(index<len(list1)):
  a=list1[0:index]
  b=list1[index::]
  a.extend(list2)
  list1.clear()
  list1=a+b
  print("Updateed list will be: ",list1)
else:
  print("Entered index",index,"is out of range")

#Ques: Find the method to insert all the element of another sequence datatype at particular index in the list. But all the element must be inserted one by one.
list1=[1,2,3,4,8,9,10]
list2=[5,6,7]
index=int(input("enter the index where you want to insert the list2: "))
if(index>=0 and index<len(list1)):
  for i in range(len(list2)):
     list1.insert(index+i,list2[i])
  print("Updated list will be: ",list1)
elif(index<0 and index>=-len(list1)):
  for i in range(len(list2)):
     list1.insert(index,list2[i])
  print("Updated list will be: ",list1)
else:
  print("Entered index",index,"is out of range")

"""# **DAY:5**

#**Tabulate module**
* The Tabulate library or Module is used to Display the Data in the form of Row and Column.


"""

#tabulate modeule in python is used to convert the data in tabular form, In tabulate module tabulate function is used here in that question
#Using LIST
from tabulate import tabulate

# Data from the spreadsheet
data = [
    ["std101", "Ashish Kumar", "10th", 15, 67, 89, 87, 89, 90, 422],
    ["std102", "Abhishek Kumar", "10th", 15, 34, 45, 78, 45, 31, 233],
    ["std103", "Aman", "10th", 15, 56, 56, 78, 78, 45, 313],
    ["std104", "Rahul", "10th", 15, 78, 67, 89, 89, 78, 402],
    ["std105", "Ruby", "10th", 13, 89, 56, 45, 45, 67, 302],
    ["std106", "Suman", "10th", 13, 67, 67, 67, 67, 67, 335],
    ["std107", "Saurabh", "10th", 15, 45, 23, 45, 78, 67, 258],
    ["std108", "Sumit", "10th", 15, 89, 90, 89, 90, 45, 403],
    ["std109", "Kamlesh", "10th", 15, 78, 45, 78, 78, 78, 337],
    ["std110", "Rohan", "10th", 15, 12, 24, 45, 56, 34, 171]
]

# Define the headers
headers = ["stdid", "stdname", "standard", "Age", "Hindi", "English", "Maths", "Science", "Computer", "Total"]

# Print the table
print(tabulate(data, headers=headers, tablefmt="grid"))

# Define the index for English marks
english_index = 5

# Find and print the names of students with English marks greater than 50 using a for loop
print("Students with English marks greater than 70:")
for row in data:
    if row[english_index] > 50:
        print(row[1])

# Extract student name, age, and Maths score
relevant_data = [(row[1], row[3], row[6]) for row in data]

# Sort the data by Maths score in descending order
sorted_data = sorted(relevant_data, key=lambda x: x[2], reverse=True)

# Select the top four students
top_four = sorted_data[:4]

# Print the top four students' names and ages
for student in top_four:
    print(f"Student Name: {student[0]}, Age: {student[1]}")

# Extract student id,name, age, and computer score
relevant_data = [(row[0], row[1],row[3], row[8]) for row in data]

# Sort the data by computer score in descending order
sorted_data = sorted(relevant_data, key=lambda x: x[3], reverse=True)

# Select the bottom three students
bottom_three = sorted_data[-3::]

# Print the bottom three students id, names and ages
for student in bottom_three:
    print(f"Student Id: { student[0]},Student Name: {student[1]}, Age: {student[2]}")

"""#**TUPLE**
* Tuple is a immutable and element is immutable.

* Mainly used to read the data because the element of the tuple can not be changed.
#**Creating a tuple**
* Tuple can be created by using parenthesis"()".
     
     example:
         a=(1,2,3,4,5)

#**Access the Tuple**
1.   **With format.**

     example:

       ```
              a=(1,2,3,4,5)
              print(a)
```



2.   **Without Format.**
    
     example:
          
              a=(1,2,3,4,5)
              print(*a)







3. **Using For Loop**
  
   example:
```
                 a=(1,2,3,4,5)
                 for i in a:
                    print(i)
```



4. **Using for loop but the element must be printed in same line**

   example:
                 a=(1,2,3,4,5)
                 for i in a:
                   print(i,end=',')




"""

# print the tuple in backward direction using forward indexing
tuple=(1,2,3,4,5)
x=len(tuple)-1
for i in range(x,-1,-1):
  print(tuple[i],end=',')

# We can not sort the tuple directly because it is immutable datatype
# But we can sort the tuple by indirectly convert the tuple into the list and do perform the sorting in the list.
a=(1,7,4,9,2,0)
b=list(a)
b.sort()
tuple(b)
print(b)

"""* Indexing is the problem in the list.

* In list , index are immutable.

* Integer is immutable.

* In list , we have to find the index of the element ,so that we can access that data on that index

**for this limitation we using DICTIONARY**

#**DICTIONARY**
* It is a collection of any type of a data.

* Elements are sorted in (key:value) pair.

* Keys must be unique

* Keys must be immutable.

* In this Indexing is done by the programmer. so, Dictionary is not follow the insertion order.

syntax:
       
       dictionary={key1:value, key2:value}

* key and value can be any datatype

* new element can not be inserted in dictionary ,only element can be updated.

#**INSERT ELEMENT IN DICTIONARY**
1. If any element is present in dictionary with specified key, element get updated.

Syntax:
      
      dict_name[key]=value
2. If the element is not present in dictionary,then element get inserted in dictionary.

Syntax:

     dict_name[key]=value  

* In dictionary , sorting can be possible either by using key or value.     
"""

#Creating a Dictionary
student={'stdid':'std101','stdname': 'Ashish Kumar','standard': '10th','age': 15}
print(student)
#insert element with key standard
student['standard']='12th'
#insert an element with key hindi
student['hindi']=78
# To print the updated dictionary
print(student)
#print the keys of dictionary
for key in student:
  print(key,"-",student[key])
#find the key of dictionary
for key in student:
  print("keys:",key)

"""#**DELETION IN DICTIONARY**
* In dictionary , there is no position of an element


1.**pop() :** To delete an element with specified key.
*            if we do not pass the key in pop(),then it gives an exception.
    

 Syntax:

        `dict_name.pop(key)`


2. **To delete the last item:**
    * **popitem():** To delete last key:value pair.

* **keys():** It will return the keys of dictionary in List.

      Syntax:
            list_name= dict_name.keys()

* **values() :**It will return the values of dictionary in list.

      Syntax:
            list_name= dict_name.keys()

* **items():** It returns a list of items i.e.
**Each item will be in the form of tuple with two member i.e. (Key,value)*
  
     Syntax:
            list_var=dict_name.items()

* **clear():** Remove all the elements from the dictionary.

* **copy()**

* **fromkeys() :** return a dictionary

* **get():** returns the value of a specified key. It contain two parameter.
      
      example:
             get('key','error message')

* **setdefault():**

* **update():** To update or insert multiple elements(key:value pair) in dictionary.
    
    Syntax:
         dict1.update(dict2)                
"""

student_data={'stdid':'std101','stdname': 'Ashish Kumar','standard': '10th','age': 15,'hindi':67,'English':89}
#To display the dictionary
print(student_data)
#delete element having key as hindi
student_data.pop('hindi')
#To delete the last item in dictionary
student_data.popitem()
print(student_data)
#to return the keys of all the element in List
element_keys=student_data.keys()
print(element_keys)
#To return the values of all the element in List of a Dictionary
element_values=student_data.values()
print(element_values)
#To return the a list of items
dict_items=student_data.items()
print(dict_items)
#To find all the value of all the element
for data in student_data.values():
  print(data)
print("------------*----------------*------------------*----------------")
x= student_data.get('maths')
print(x)
print('------------------*-------------------*---------------*------------')
# Using update()
dict1={'name':'Amit','Age':15,'standard':'10th'}
print(dict1)
dict2={'hindi':67,'Age':16,'standard':"12th",'English':67}
print((dict2))
# inserting all the element of the dict2 into dict1
dict1.update(dict2)
print(dict1)
print('------------------*-------------------*---------------*------------')
#Using fromkeys()
x=dict1.fromkeys('english',16)
print(x)
y=dict1.fromkeys(dict1.keys(),dict1.values())
print(y)
z=dict1.fromkeys(dict1.keys(),16)
print(z)
print("-------------------*-----------------*----------------*----------------")
#To find the no. of element of a dictionary
print(len(dict1))

from tabulate import tabulate
# Using DICTIONARY
# Data of the Student from Excel
data = [
    {"stdid": "std101", "stdname": "Ashish Kumar", "standard": "10th", "Age": 15, "Hindi": 67, "English": 89, "Maths": 87, "Science": 89, "Computer": 90, "Total": 422},
    {"stdid": "std102", "stdname": "Abhishek Kumar", "standard": "10th", "Age": 15, "Hindi": 34, "English": 45, "Maths": 78, "Science": 45, "Computer": 31, "Total": 233},
    {"stdid": "std103", "stdname": "Aman", "standard": "10th", "Age": 15, "Hindi": 56, "English": 56, "Maths": 78, "Science": 78, "Computer": 45, "Total": 313},
    {"stdid": "std104", "stdname": "Rahul", "standard": "10th", "Age": 15, "Hindi": 78, "English": 67, "Maths": 89, "Science": 89, "Computer": 78, "Total": 402},
    {"stdid": "std105", "stdname": "Ruby", "standard": "10th", "Age": 13, "Hindi": 89, "English": 56, "Maths": 45, "Science": 45, "Computer": 67, "Total": 302},
    {"stdid": "std106", "stdname": "Suman", "standard": "10th", "Age": 13, "Hindi": 67, "English": 67, "Maths": 67, "Science": 67, "Computer": 67, "Total": 335},
    {"stdid": "std107", "stdname": "Saurabh", "standard": "10th", "Age": 15, "Hindi": 45, "English": 23, "Maths": 45, "Science": 78, "Computer": 67, "Total": 258},
    {"stdid": "std108", "stdname": "Sumit", "standard": "10th", "Age": 15, "Hindi": 89, "English": 90, "Maths": 89, "Science": 90, "Computer": 45, "Total": 403},
    {"stdid": "std109", "stdname": "Kamlesh", "standard": "10th", "Age": 15, "Hindi": 78, "English": 45, "Maths": 78, "Science": 78, "Computer": 78, "Total": 337},
    {"stdid": "std110", "stdname": "Rohan", "standard": "10th", "Age": 15, "Hindi": 12, "English": 24, "Maths": 45, "Science": 56, "Computer": 34, "Total": 171}
]
# To print the data in tabular form
print(tabulate(data, headers="keys", tablefmt="grid"))
# Initialize an empty list to store names of students
filtered_students = []
# To check if the student's English marks is greater than 50
for student in data:
    if student["English"] > 50:
        filtered_students.append(student["stdname"])
# Print the names of students
print("Students whose marks in English are greater than 50:")
for name in filtered_students:
    print(name)

print("------------------*------------------*-----------------*------------------")
print("Name and Age of a student who are top four scorer in Maths:")
# Sort data based on Maths scores in descending order
sorted_data = sorted(data, key=lambda x: x["Maths"], reverse=True)
top_four = sorted_data[0:4]
# Prepare table data that contain the name and age of top four scorer of Maths
table_data = [[student["stdname"], student["Age"]] for student in top_four]
# Display the table_data in tabular form
print(tabulate(table_data, headers=["Student Name", "Age"], tablefmt="grid"))

print("------------------*------------------*-----------------*------------------")
print("Name, Id and Age of student who are bottom three scorer in Computer:")
# Sort data based on Computer scores in ascending order
sorted_data = sorted(data, key=lambda x: x["Computer"])
bottom_three = sorted_data[:3]

#Prepare table data that contain the Name ,Id and Age of bottom three scorer in Computer
table_data = [[student["stdname"], student["stdid"], student["Age"]] for student in bottom_three]
# Display the table_data in tabular form
print(tabulate(table_data, headers=["Student Name", "Student ID", "Age"], tablefmt="grid"))